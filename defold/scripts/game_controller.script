local ColyseusClient = require "colyseus.client"

-- SERVER VARS
local server_adress = "localhost"
local server_port = "3553"

--VARS
local client
local room
local numPlayers = 0
local gui_controller = msg.url("game", hash("/gui"), "game")

-- Show winner or loser on GUI
local function showWinner(sessionId)
	room:leave()
	local result = (room.sessionId == sessionId) and true or false
	msg.post(gui_controller, "Winners", {won = result})
end

-- Show draw on GUI
local function drawGame()
	room:leave()
	msg.post(gui_controller, "Draw")
end

-- Change the turn on GUI
local function nextTurnOut(change_value)
	local result = (change_value == room.sessionId) and 1 or 0
	msg.post(gui_controller, "ChangeTurn", {turn = result})
end

-- When join completed start the game on GUI
local function onJoin()
	msg.post(gui_controller, "start_game")
end

function init(self)
	-- Connect to WS
	client = ColyseusClient.new("ws://" .. server_adress .. ":" .. server_port, false) -- false: not to connect immediately

	-- EVENTS
	-- Join Room
	client:join_or_create("tictactoe", {}, function(err, room_instance)
		if err then
			print("ERROR JOINING ROOM")
			pprint(err)
			msg.post(gui_controller, "connection_fail")
			return
		end

		-- assign our roomm instance to global "room" variable
		room = room_instance

		--Listen to room state changes from the room handler.
		--Use this method to synchronize the room state from the server with the clients.
		room.state.players:on_add(function(player, sessionId)
			numPlayers = numPlayers + 1
			if numPlayers == 2 then
				onJoin()
				nextTurnOut(sessionId) -- Called second time here
			end
		end)

		room.state.players:on_remove(function(player, sessionId)
			numPlayers = numPlayers - 1
		end)

		room.state:on_change(function(changes)
			for i, change in ipairs(changes) do
				if change.field == "currentTurn" then
					nextTurnOut(change.value)
				elseif change.field == "draw" then
					drawGame()
				elseif change.field == "winner" then
					showWinner(change.value)
				end
			end
		end)

		room.state.board:on_change(function(value, index)
			local i = index - 1
			local x = i % 3
			local y = math.floor(i / 3)
			msg.post(gui_controller, "ChangeTile", {change = {x=x, y=y, value=value}})
		end)

		room:on("error", function(err)
			print("oops, error ocurred:")
			print(err)
		end)
	end);
end

function final(self)
	if room then
		-- If there is a active connection then clean it up
		room:leave()
		client = nil
		room = nil
	end
end

function update(self, dt)
	--
end

function on_message(self, message_id, message, sender)
	if message_id == hash("SetTile") then
		-- Send server to selected tile's x, y
		room:send("action", {
			x = message.x,
			y = message.y
		})
	end
end
